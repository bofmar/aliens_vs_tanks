;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-beginner-abbr-reader.ss" "lang")((modname aliens_vs_tanks) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructor repeating-decimal #f #t none #f () #f)))
(require 2htdp/image)
(require 2htdp/universe)
(require test-engine/racket-tests)

;; Aliens vs Tanks
;; A simple game where the player takes the role of a tank, tasked with defending
;; the earth from the dastardly alien's invasion. The player can move left and right
;; and fire bullets directly up. The aliens appear from the top of the screen and move
;; on a 45 degree angle, either left or right. Game is over when an alien reaches the
;; bottom of the screen.

;; =================
;; Constants:
;; World Constants
(define WIDTH 600)
(define HEIGHT 1000)
(define MTS (empty-scene WIDTH HEIGHT "black"))
;; Tank Constants
(define TANK-HEIGHT 30)
(define TANK-SHAPE (rectangle 60 TANK-HEIGHT "solid" "blue"))
(define TANK-SPEED 5)
(define TANKT-Y (- HEIGHT (/ TANK-HEIGHT 2) 5))
;; Bullet Constants
(define BULLTET-SHAPE (rectangle 10 30 "solid" "white"))
(define BULLET-SPEED 5)
;; ALien constants
(define ALIEN-SHAPE (ellipse 60 30 "solid" "gray"))
(define ALIEN-SPEED 5)
(define SPAWN-Y 0)
;; Points constants
(define POINTS-X (/ WIDTH 2))
(define POINTS-Y 30)
(define FONT-COLOR "white")
(define FONT-SIZE 16)


;; =================
;; Data definitions:

;; Alien
(define-struct alien (img x y direction))
;; Alien is (make-alien IMAGE NUMBER NUMBER BOOLEAN)
;; interp. an ellipse with an x and y position and a true or false direction
;; (true means the alien is movig left, false that it moves right)
(define A1 (make-alien ALIEN-SHAPE 10 20 false)) ;; alien moving right
(define A2 (make-alien ALIEN-SHAPE 10 20 true)) ;; alien moving left
(define A3 (make-alien ALIEN-SHAPE 20 30 true)) ;; alien moving left

;; Tank
(define-struct tank (img x y))
;; Tank is (make-tank IMAGE NUMBER NUMBER)
;; interp. a rectangle with an x and y position
(define T0 (make-tank TANK-SHAPE (/ WIDTH 2) TANKT-Y))
(define T1 (make-tank TANK-SHAPE 20 TANKT-Y))

;; Bullet
(define-struct bullet (img x y))
;; Bullet is (make-bullet IMAGE NUMBER NUMBER)
;; interp. a bullet with an x and y position
(define B1 (make-bullet BULLTET-SHAPE 30 810))
(define B2 (make-bullet BULLTET-SHAPE 10 900))

;; Points
(define-struct points (img x y))
;; Points is (make-points IMAGE NUMBER NUMBER)
;; interp. a points text with an x and y position
(define P1 (make-points (text (number->string 0) FONT-SIZE FONT-COLOR) POINTS-X POINTS-Y))
(define P2 (make-points (text (number->string 20) FONT-SIZE FONT-COLOR) POINTS-X POINTS-Y))

;; AliensList is one of:
;; - empty
;; - (const Alien AliensList)
(define AL1 empty)
(define AL2 (list A1 A2))

;; BulletsList is one of:
;; - empty
;; - (const Bullet BulletsList)
(define BL1 empty)
(define BL2 (list B1))

(define-struct game (tank alienList bulletList points state))
;; Game is (make-game Tank AlienList BulletList Points Boolean)
;; interp. If state is true then the game goes on. Else it's game over.
(define G1 (make-game T0 AL1 BL1 P1 true))
(define G2 (make-game T1 (list A1 A3) (list B1 B2) P2 true))


;; =================
;; Functions:

;; Game -> Game
;; start the world with initial state g, for example (main G1)
;; 
(define (main g)
  (big-bang g									; g
            (on-tick   handle-tick)             ; g -> g
            (to-draw   render-world)))			; g -> Image
            ;;(stop-when ...)      ; WS -> Boolean
            ;;(on-key    ...)))    ; WS KeyEvent -> WS

;; WS -> WS
;; produce the next ...
;; !!!
(define (handle-tick g) g)


;; Game -> Image
;; render all items in their propper positions
;; !!!
(check-expect (render-world G1) (place-image TANK-SHAPE (/ WIDTH 2) TANKT-Y MTS))
(check-expect (render-world (T1 (list A1 A3) (list B1 B2) P2 true))
			  (place-images (list TANK-SHAPE ALIEN-SHAPE ALIEN-SHAPE BULLTET-SHAPE BULLTET-SHAPE (points-img P2))
							(list (make-posn 20 TANKT-Y) (make-posn 10 20)
								  (make-posn 20 30) (make-posn 30 810)
								  (make-posn 10 900) (make-posn POINTS-X POINTS-Y)) MTS))

(define (render-world g)
	(place-images (list TANK-SHAPE TANK-SHAPE) (list (make-posn (tank-x (game-tank g)) TANKT-Y)
													 (make-posn 80 100)) MTS))

;; Game -> ListOfImage
;; Takes the game and produces an image for every object in it
;; !!!
(check-expect (get-images-list G1) (list TANK-SHAPE))
(check-expect (get-images-list G2) (list TANK-SHAPE ALIEN-SHAPE ALIEN-SHAPE BULLTET-SHAPE BULLTET-SHAPE (points-img P2)))

(define (get-images-list g)
  (list TANK-SHAPE (get-alien-images (game-alienList g)) 
		(get-bullet-images (game-bulletList g)) (points-img (game-points g))))
																								
;; AliensList -> ListOfImage
;; Takes a list of aliens and returns their images
(check-expect (get-alien-images empty) empty)
(check-expect (get-alien-images AL2) (list ALIEN-SHAPE ALIEN-SHAPE))

(define (get-alien-images al)
  (cond [(empty? al) empty]
		[else (cons ALIEN-SHAPE (cons (get-alien-images (rest al))))]))

;; AliensList -> ListOfImage
;; Takes a list of aliens and returns their images
(check-expect (get-bullet-images empty) empty)
(check-expect (get-bullet-images BL2) (list BULLTET-SHAPE))

(define (get-bullet-images bl)
  (cond [(empty? bl) empty]
		[else (list BULLTET-SHAPE (get-bullet-images (rest bl)))]))

(test)
(main G1)
